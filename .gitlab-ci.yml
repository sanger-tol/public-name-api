stages:
  - lint
  - build
  - test
  - deploy

variables:
  DOCKER_IMAGE: gitlab-registry.internal.sanger.ac.uk/sanger-pathogens/sapp2/build-tools:1.0.1
  DIND_IMAGE: gitlab-registry.internal.sanger.ac.uk/sanger-pathogens/sapp2/dind:1.0.0
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

lint:
  tags:
    - autoscale
  image: python:3.7
  stage: lint
  script:
    - pip install flake8
    - flake8 swagger_server/

build:
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
  stage: build
  services:
    - name: $DIND_IMAGE
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TEST_IMAGE || true
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

test:
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  stage: test
  services:
    - name: $DIND_IMAGE
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    POSTGRES_DB: tolid
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: runner
    POSTGRES_HOST_AUTH_METHOD: trust
    DB_URI: postgresql://runner:runner@db/tolid
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker network create -d bridge my-network
    - docker run --network my-network --name db --env POSTGRES_USER --env POSTGRES_PASSWORD --env POSTGRES_DB --env POSTGRES_HOST_AUTH_METHOD -dp 5432:5432 postgres:12
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --network my-network -dp 8080:8080 --env DB_URI --name tolid-api $CONTAINER_TEST_IMAGE
    - docker exec tolid-api bash -c "pip3 install tox; tox"

.deploy-template: &deploy-template
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  variables:
    DOCKER_TLS_CERTDIR: ''
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $IMAGE
    - docker push $IMAGE
    - docker rm -f tolid-api || true
    - docker run -dp 80:8080 --restart always --env-file $ENV_FILE --name tolid-api $IMAGE

deploy-staging:
  <<: *deploy-template
  environment:
    name: staging
    url: http://172.27.21.233
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.21.233"
    IMAGE: $CI_REGISTRY_IMAGE:staging
  except:
    - master

deploy-prod:
  <<: *deploy-template
  environment:
    name: production
    url: https://id.tol.sanger.ac.uk
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.28.201"
    IMAGE: $CI_REGISTRY_IMAGE:production
  when: manual
  only:
    - master
