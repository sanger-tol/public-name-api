# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TaxSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, taxonomy_id: int=None, specimen_id: str=None):  # noqa: E501
        """TaxSpec - a model defined in Swagger

        :param taxonomy_id: The taxonomy_id of this TaxSpec.  # noqa: E501
        :type taxonomy_id: int
        :param specimen_id: The specimen_id of this TaxSpec.  # noqa: E501
        :type specimen_id: str
        """
        self.swagger_types = {
            'taxonomy_id': int,
            'specimen_id': str
        }

        self.attribute_map = {
            'taxonomy_id': 'taxonomyId',
            'specimen_id': 'specimenId'
        }
        self._taxonomy_id = taxonomy_id
        self._specimen_id = specimen_id

    @classmethod
    def from_dict(cls, dikt) -> 'TaxSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaxSpec of this TaxSpec.  # noqa: E501
        :rtype: TaxSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def taxonomy_id(self) -> int:
        """Gets the taxonomy_id of this TaxSpec.


        :return: The taxonomy_id of this TaxSpec.
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id: int):
        """Sets the taxonomy_id of this TaxSpec.


        :param taxonomy_id: The taxonomy_id of this TaxSpec.
        :type taxonomy_id: int
        """
        if taxonomy_id is None:
            raise ValueError("Invalid value for `taxonomy_id`, must not be `None`")  # noqa: E501

        self._taxonomy_id = taxonomy_id

    @property
    def specimen_id(self) -> str:
        """Gets the specimen_id of this TaxSpec.


        :return: The specimen_id of this TaxSpec.
        :rtype: str
        """
        return self._specimen_id

    @specimen_id.setter
    def specimen_id(self, specimen_id: str):
        """Sets the specimen_id of this TaxSpec.


        :param specimen_id: The specimen_id of this TaxSpec.
        :type specimen_id: str
        """
        if specimen_id is None:
            raise ValueError("Invalid value for `specimen_id`, must not be `None`")  # noqa: E501

        self._specimen_id = specimen_id
