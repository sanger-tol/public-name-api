# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PublicName(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prefix: str=None, public_name: str=None, species: str=None, tax_id: float=None, common_name: str=None, genus: str=None, family: str=None, order: str=None, taxa_class: str=None, phylum: str=None):  # noqa: E501
        """PublicName - a model defined in Swagger

        :param prefix: The prefix of this PublicName.  # noqa: E501
        :type prefix: str
        :param public_name: The public_name of this PublicName.  # noqa: E501
        :type public_name: str
        :param species: The species of this PublicName.  # noqa: E501
        :type species: str
        :param tax_id: The tax_id of this PublicName.  # noqa: E501
        :type tax_id: float
        :param common_name: The common_name of this PublicName.  # noqa: E501
        :type common_name: str
        :param genus: The genus of this PublicName.  # noqa: E501
        :type genus: str
        :param family: The family of this PublicName.  # noqa: E501
        :type family: str
        :param order: The order of this PublicName.  # noqa: E501
        :type order: str
        :param taxa_class: The taxa_class of this PublicName.  # noqa: E501
        :type taxa_class: str
        :param phylum: The phylum of this PublicName.  # noqa: E501
        :type phylum: str
        """
        self.swagger_types = {
            'prefix': str,
            'public_name': str,
            'species': str,
            'tax_id': float,
            'common_name': str,
            'genus': str,
            'family': str,
            'order': str,
            'taxa_class': str,
            'phylum': str
        }

        self.attribute_map = {
            'prefix': 'prefix',
            'public_name': 'publicName',
            'species': 'species',
            'tax_id': 'taxonomyId',
            'common_name': 'commonName',
            'genus': 'genus',
            'family': 'family',
            'order': 'order',
            'taxa_class': 'taxaClass',
            'phylum': 'phylum'
        }
        self._prefix = prefix
        self._public_name = public_name
        self._species = species
        self._tax_id = tax_id
        self._common_name = common_name
        self._genus = genus
        self._family = family
        self._order = order
        self._taxa_class = taxa_class
        self._phylum = phylum

    @classmethod
    def from_dict(cls, dikt) -> 'PublicName':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PublicName of this PublicName.  # noqa: E501
        :rtype: PublicName
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix(self) -> str:
        """Gets the prefix of this PublicName.


        :return: The prefix of this PublicName.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: str):
        """Sets the prefix of this PublicName.


        :param prefix: The prefix of this PublicName.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def public_name(self) -> str:
        """Gets the public_name of this PublicName.


        :return: The public_name of this PublicName.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name: str):
        """Sets the public_name of this PublicName.


        :param public_name: The public_name of this PublicName.
        :type public_name: str
        """
        if public_name is None:
            raise ValueError("Invalid value for `public_name`, must not be `None`")  # noqa: E501

        self._public_name = public_name

    @property
    def species(self) -> str:
        """Gets the species of this PublicName.


        :return: The species of this PublicName.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species: str):
        """Sets the species of this PublicName.


        :param species: The species of this PublicName.
        :type species: str
        """
        if species is None:
            raise ValueError("Invalid value for `species`, must not be `None`")  # noqa: E501

        self._species = species

    @property
    def tax_id(self) -> float:
        """Gets the tax_id of this PublicName.


        :return: The tax_id of this PublicName.
        :rtype: float
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: float):
        """Sets the tax_id of this PublicName.


        :param tax_id: The tax_id of this PublicName.
        :type tax_id: float
        """
        if tax_id is None:
            raise ValueError("Invalid value for `tax_id`, must not be `None`")  # noqa: E501

        self._tax_id = tax_id

    @property
    def common_name(self) -> str:
        """Gets the common_name of this PublicName.


        :return: The common_name of this PublicName.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name: str):
        """Sets the common_name of this PublicName.


        :param common_name: The common_name of this PublicName.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def genus(self) -> str:
        """Gets the genus of this PublicName.


        :return: The genus of this PublicName.
        :rtype: str
        """
        return self._genus

    @genus.setter
    def genus(self, genus: str):
        """Sets the genus of this PublicName.


        :param genus: The genus of this PublicName.
        :type genus: str
        """
        if genus is None:
            raise ValueError("Invalid value for `genus`, must not be `None`")  # noqa: E501

        self._genus = genus

    @property
    def family(self) -> str:
        """Gets the family of this PublicName.


        :return: The family of this PublicName.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family: str):
        """Sets the family of this PublicName.


        :param family: The family of this PublicName.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")  # noqa: E501

        self._family = family

    @property
    def order(self) -> str:
        """Gets the order of this PublicName.


        :return: The order of this PublicName.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order: str):
        """Sets the order of this PublicName.


        :param order: The order of this PublicName.
        :type order: str
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def taxa_class(self) -> str:
        """Gets the taxa_class of this PublicName.


        :return: The taxa_class of this PublicName.
        :rtype: str
        """
        return self._taxa_class

    @taxa_class.setter
    def taxa_class(self, taxa_class: str):
        """Sets the taxa_class of this PublicName.


        :param taxa_class: The taxa_class of this PublicName.
        :type taxa_class: str
        """
        if taxa_class is None:
            raise ValueError("Invalid value for `taxa_class`, must not be `None`")  # noqa: E501

        self._taxa_class = taxa_class

    @property
    def phylum(self) -> str:
        """Gets the phylum of this PublicName.


        :return: The phylum of this PublicName.
        :rtype: str
        """
        return self._phylum

    @phylum.setter
    def phylum(self, phylum: str):
        """Sets the phylum of this PublicName.


        :param phylum: The phylum of this PublicName.
        :type phylum: str
        """
        if phylum is None:
            raise ValueError("Invalid value for `phylum`, must not be `None`")  # noqa: E501

        self._phylum = phylum
