# coding: utf-8

"""
    Tree of Life public name API

    API for ToL Public name registry  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: kh14@sanger.ac.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

from utils.db_utils import get_db
import six

class PublicName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prefix': 'str',
        'species': 'str',
        'tax_id': 'float',
        'common_name': 'str',
        'genus': 'str',
        'family': 'str',
        'order': 'str',
        'taxa_class': 'str',
        'phylum': 'str'
    }

    attribute_map = {
        'prefix': 'prefix',
        'species': 'species',
        'tax_id': 'taxID',
        'common_name': 'commonName',
        'genus': 'genus',
        'family': 'family',
        'order': 'order',
        'taxa_class': 'taxaClass',
        'phylum': 'phylum'
    }

    def __init__(self, prefix=None, species=None, tax_id=None, common_name=None, genus=None, family=None, order=None, taxa_class=None, phylum=None):  # noqa: E501
        """PublicName - a model defined in Swagger"""  # noqa: E501
        self._prefix = None
        self._species = None
        self._tax_id = None
        self._common_name = None
        self._genus = None
        self._family = None
        self._order = None
        self._taxa_class = None
        self._phylum = None
        self.discriminator = None
        self.prefix = prefix
        self.species = species
        self.tax_id = tax_id
        self.common_name = common_name
        self.genus = genus
        self.family = family
        self.order = order
        self.taxa_class = taxa_class
        self.phylum = phylum

    # ToDo, add to database
    # db = get_db(db)

    @property
    def prefix(self):
        """Gets the prefix of this PublicName.  # noqa: E501


        :return: The prefix of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PublicName.


        :param prefix: The prefix of this PublicName.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def species(self):
        """Gets the species of this PublicName.  # noqa: E501


        :return: The species of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this PublicName.


        :param species: The species of this PublicName.  # noqa: E501
        :type: str
        """
        if species is None:
            raise ValueError("Invalid value for `species`, must not be `None`")  # noqa: E501

        self._species = species

    @property
    def tax_id(self):
        """Gets the tax_id of this PublicName.  # noqa: E501


        :return: The tax_id of this PublicName.  # noqa: E501
        :rtype: float
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this PublicName.


        :param tax_id: The tax_id of this PublicName.  # noqa: E501
        :type: float
        """
        if tax_id is None:
            raise ValueError("Invalid value for `tax_id`, must not be `None`")  # noqa: E501

        self._tax_id = tax_id

    @property
    def common_name(self):
        """Gets the common_name of this PublicName.  # noqa: E501


        :return: The common_name of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this PublicName.


        :param common_name: The common_name of this PublicName.  # noqa: E501
        :type: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def genus(self):
        """Gets the genus of this PublicName.  # noqa: E501


        :return: The genus of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._genus

    @genus.setter
    def genus(self, genus):
        """Sets the genus of this PublicName.


        :param genus: The genus of this PublicName.  # noqa: E501
        :type: str
        """
        if genus is None:
            raise ValueError("Invalid value for `genus`, must not be `None`")  # noqa: E501

        self._genus = genus

    @property
    def family(self):
        """Gets the family of this PublicName.  # noqa: E501


        :return: The family of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this PublicName.


        :param family: The family of this PublicName.  # noqa: E501
        :type: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")  # noqa: E501

        self._family = family

    @property
    def order(self):
        """Gets the order of this PublicName.  # noqa: E501


        :return: The order of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PublicName.


        :param order: The order of this PublicName.  # noqa: E501
        :type: str
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def taxa_class(self):
        """Gets the taxa_class of this PublicName.  # noqa: E501


        :return: The taxa_class of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._taxa_class

    @taxa_class.setter
    def taxa_class(self, taxa_class):
        """Sets the taxa_class of this PublicName.


        :param taxa_class: The taxa_class of this PublicName.  # noqa: E501
        :type: str
        """
        if taxa_class is None:
            raise ValueError("Invalid value for `taxa_class`, must not be `None`")  # noqa: E501

        self._taxa_class = taxa_class

    @property
    def phylum(self):
        """Gets the phylum of this PublicName.  # noqa: E501


        :return: The phylum of this PublicName.  # noqa: E501
        :rtype: str
        """
        return self._phylum

    @phylum.setter
    def phylum(self, phylum):
        """Sets the phylum of this PublicName.


        :param phylum: The phylum of this PublicName.  # noqa: E501
        :type: str
        """
        if phylum is None:
            raise ValueError("Invalid value for `phylum`, must not be `None`")  # noqa: E501

        self._phylum = phylum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
